// 문제
// 월드전자는 노트북을 제조하고 판매하는 회사이다. 노트북 판매 대수에 상관없이 매년 임대료, 재산세, 보험료, 급여 등 A만원의 고정 비용이 들며, 한 대의 노트북을 생산하는 데에는 재료비와 인건비 등 총 B만원의 가변 비용이 든다고 한다.

// 예를 들어 A=1,000, B=70이라고 하자. 이 경우 노트북을 한 대 생산하는 데는 총 1,070만원이 들며, 열 대 생산하는 데는 총 1,700만원이 든다.

// 노트북 가격이 C만원으로 책정되었다고 한다. 일반적으로 생산 대수를 늘려 가다 보면 어느 순간 총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 많아지게 된다. 최초로 총 수입이 총 비용보다 많아져 이익이 발생하는 지점을 손익분기점(BREAK-EVEN POINT)이라고 한다.

// A, B, C가 주어졌을 때, 손익분기점을 구하는 프로그램을 작성하시오.

// 입력
// 첫째 줄에 A, B, C가 빈 칸을 사이에 두고 순서대로 주어진다. A, B, C는 21억 이하의 자연수이다.

// 출력
// 첫 번째 줄에 손익분기점 즉 최초로 이익이 발생하는 판매량을 출력한다. 손익분기점이 존재하지 않으면 -1을 출력한다.

// 예제 입력 1
// 1000 70 170
// 예제 출력 1
// 11
// 예제 입력 2
// 3 2 1
// 예제 출력 2
// -1
// 예제 입력 3
// 2100000000 9 10
// 예제 출력 3
// 2100000001

const fs = require("fs");
const filePath = process.platform === "linux" ? "/dev/stdin" : "./input.txt";
let input = fs.readFileSync(filePath).toString().trim().split(" ");

let A = Number(input[0]);
let B = Number(input[1]);
let C = Number(input[2]);

let N = A / (C - B);

let answer = Math.floor(N) + 1;

B >= C ? (answer = -1) : answer;

console.log(answer);

// 출력된 2100000001 숫자가 입력창의 A숫자 2100000000하고 단 1의 차이만 있다. 9와 10의 숫자 차이도 1이다. C - B의 결과값으로 A를 나누면 거기에 1를 더한 출력창의 결과값이 나올 수 있는걸 추측 할 수있다.
// 이 공식으로 예제 1도 구할 수 있으니 거의 확정적인 계산법인 것이다.

// 다만 여러 테스트케이스들을 고려할 때 계산값이 예제1과 예제3처럼 딱 떨어지는 정수가 아닌 실수도 나올 수 있는 걸 감안해야한다. 그래서 Math.floor(N) 로 반내림 처리한 후 손익분기점을 넘기기위해 +1도 넣는다.

// 그리고 B의 정수가 C의 정수보다 크거나 같으면 Infinity 또는 음수가 반환되어 손익분기점이 성립못하므로 그런 경우가 생겼을 때를 대비해 간단한 조건문을 붙여서 -1를 반환한다.

// 핵심 포인트 1. 손익분기점을 구할 수 없는 조건을 구해야 한다. (즉 -1을 출력해야 하는 경우)

//   손익분기점을 구할 수 없는 조건이란 무엇일까?

//   비용 < 수익이 되려면

//   고정비용 + 가변비용*n < 물건가격*n 이 되고, 이를 학창시절 부등식을 이용하여 풀면

//   (물건가격 - 가변비용)n > 고정비용

//   n > 고정비용 / (물건가격 - 가변비용)

//   이 되는데, 이 때 n은 손익분기점을 발생시킬 물건의 개수이므로 양수이어야 한다.

//   그러므로 즉 우항에 해당하는 부분에서 분모 인 물건가격 - 가변비용이 무조건 0보다 큰 양수여야 하는 것이다.

//   즉 물건가격 - 가변비용 <=0 이라면 -1을 출력하도록 하면 된다.

// 핵심 포인트 2. 반복문을 사용하면 안된다.

// 이를 n을 하나씩 증가시키면서 조건에 부합할 때 반복문을 탈출하며 n을 출력하는 방법도 있으나, 21억 이하의 자연수라면 n을 구하기 위해 반복문을 돌리는 횟수도 만만치 않을 것이다. 실제로 처음에는 반복문으로 작성했다가 시간초과가 뜨곤 했다.

// 그러므로 아까 위에서 정리한 부등식에서, 프로그래밍 언어로는 부등식을 단번에 풀 수 없으니 부등식말고 좌항과 우항이 같다고 생각하고 푸는 것이다.

// 즉, n = (고정비용 / (물건가격 - 가변비용)) + 1이라고 하는 것이다.

// 나누기를 했을 때에는 소수점이 나올 수 있으므로 자바스크립트의 Math.floor를 이용해서 소수점을 제거한다.
